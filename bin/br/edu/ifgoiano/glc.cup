package br.edu.ifgoiano;

import br.edu.ifgoiano.graph.Grafo;
import java_cup.runtime.*;

parser code {:
  private Grafo grafo;
  private java.util.Set<String> declared = new java.util.HashSet<>();

  public Grafo getGrafo() { return grafo; }

  public void syntax_error(Symbol s){    
        this.defineError(s.left, s.right);   
	}

  public void defineError(int line, int column, String text) {
      Yylex scanner = (Yylex) this.getScanner();
      scanner.defineError(line, column, text);
  }

  public void defineError(int linha, int coluna){   
      Yylex scanner = (Yylex) this.getScanner();
      scanner.defineError(linha, coluna);
	}

  public void defineError(String text) {
      Yylex scanner = (Yylex) this.getScanner();
      scanner.defineError(text);
  }
:};

terminal GRAPH, COLON, DIRECTED, UNDIRECTED,
         VERTEX, EDGE, PRINT, ADJACENCY,
         ARROW, DASH;
terminal String ID, ERROR;

non terminal S, TYPE, VERTICES, EDGES, COMMANDS;

start with S;

S ::= GRAPH COLON TYPE
    | error {: 
        parser.defineError("Sintaxe inválida. Use 'GRAPH:' seguido de 'directed' ou 'undirected'.");
      :}
    ;

TYPE ::=
    DIRECTED
    {:
        parser.grafo = new Grafo(true, true);
    :}
    VERTICES EDGES COMMANDS
    | UNDIRECTED
    {:
        parser.grafo = new Grafo(false, true);
    :}
    VERTICES EDGES COMMANDS
    | error {: parser.defineError("Erro na sintaxe de construção do Grafo."); :}
  ;

VERTICES ::=
    VERTEX ID:i
      {:
        if(declared.contains(i)) {
          parser.defineError(ileft, iright, "Vértice '" + i + "' já declarado");
        } else {
          declared.add(i);
          parser.grafo.adicionarVertice(i);
        }
      :}
    VERTICES
    | /* vazio */
  ;

EDGES ::=
    EDGE ID:v ARROW ID:w
      {:
        if (!declared.contains(v)) {
          parser.defineError(vleft, vright,
            "Vértice '" + v + "' não declarado");
        }

        if (!declared.contains(w)) {
            parser.defineError(wleft, wright,
              "Vértice '" + w + "' não declarado");
        }

        if (declared.contains(v) && declared.contains(w)) {
            if (!parser.grafo.isDirecionado()) {
                parser.defineError(vleft, vright,
                  "Grafo não direcionado: não pode usar '->'");
            } else {
                parser.grafo.adicionarAresta(v, w);
            }
        }
      :}
    EDGES
    | EDGE ID:v DASH ID:w
      {:
        if (!declared.contains(v)) {
          parser.defineError(vleft, vright,
            "Vértice '" + v + "' não declarado");
        }

        if (!declared.contains(w)) {
            parser.defineError(wleft, wright,
              "Vértice '" + w + "' não declarado");
        }

        if (declared.contains(v) && declared.contains(w)) {
            if (parser.grafo.isDirecionado()) {
                parser.defineError(vleft, vright,
                  "Grafo direcionado: não pode usar '--'");
            } else {
                parser.grafo.adicionarAresta(v, w);
            }
        }
      :}
    EDGES
  | /* vazio */
  ;

COMMANDS ::= PRINT ADJACENCY
            {:
                parser.grafo.salvarMatrizAdjacenciaEmArquivo("src/br/edu/ifgoiano/output/matriz_adjacencia.txt");
            :}
            | /* vazio */
            ;

